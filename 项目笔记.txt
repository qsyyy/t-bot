#安装git后需要进行第一次设置。
git config --global user.name "qsyyy"
git config --global user.email "xu96078@gmail.com"

#然后配置ssh
ssh-keygen -t rsa -b 4096 -C "your_email@example.com" #直接回车3次默认设置即可

#然后去默认保存路径为~/.ssh/id_rsa.pub 复制公钥粘贴到github上。



#创建本地项目  ：先进目录，然后
	git init
	
	
	#创建git库，命名为t-bot
	
	#需要注意的是本地创建的分支名称一般是master，但是远程是main所以需要先更改本地分支。
	git branch -M main #修改本地分支名称


	
	
	git remote add origin git@github.com:qsyyy/t-bot.git #关联远程仓库
	
	git add .  #添加进暂存区
	
	git commit -m "Initial commit" #提交更改到本地仓房中。
	
	
	git push -u origin main  #d第一次push时使用-u命令绑定到main分支，推送代码到main分支上
	
	git push #第二次直接push就行。
	
	{
	第一次从远程拉取仓库：
	如果分支是main，项目是t-bot
	首先要激活仓库
	选择一个目录，
	git init
	然后关联仓库 
	git remote add origin git@github.com:qsyyy/t-bot.git
	
	然后修改分支名！
	git branch -M main #修改本地分支名称
	if {本地已有旧版未提交的文件}
		git reset --hard origin/main #丢弃本地修改
		git clean -fd  # 删除未跟踪的文件和目录
		
		else if {保留更改}
				git stash        # 暂存本地修改
				git pull origin main
				git stash pop    # 恢复暂存的修改（可能需要解决冲突）
		else if 
				git pull origin main
				
	以后直接git pull就行

	}
	
	

	
	
	
	项目依赖：依赖写进requirements里，一键安装
	pip install -r requirements.txt
	
	conda环境如果不装在用户目录则可以使用地址直接启动
	
	

	
	有用的prompt{1.请你扮演资深的python开发者。2。作为资深专家的你编写程序会特别注意实现功能符合需求。3.作为资深专家的你编写程序会十分注意检查代码是否需求，代码的功能完整性。4.作为资深专家的你编写程序会十分注意检查变量、函数、表的定义防止bug出现，提供完整的报错信息和丰富的注释。4.我是向你请教的没有编程知识的好朋友，所以请你将修改后的代码合并到源代码中完整输出。当完整代码太长时请你按模块完整给出修改后的代码。并准确告知要放在哪一段代码的前面或者后面。记住一定要完整！！ }
	

每个帖子都算一次请求，必须改为使用爬虫直接爬





一个重写的需求{
Twitter Likes to Telegram Bot 需求规范
系统概述
开发一个可将指定Twitter账号点赞内容自动同步到Telegram频道的机器人，遵守Twitter API v2使用限制，保证每月API调用不超过100次。

核心功能
1. 触发机制
定时任务：

每日 06:00 UTC 和 22:00 UTC 自动执行

间隔16小时，符合15分钟冷却时间要求

手动触发：

私聊：/update 立即执行（每月最多10次）

频道：/update 触发后自动删除指令消息

冷却提示：触发后返回剩余可用次数

2. 数据获取
认证流程：

使用OAuth 2.0 PKCE流程

/auth 生成state参数并返回认证链接

回调URL解析需验证state防CSRF攻击

Token自动刷新机制（提前1小时）

3. 数据处理
增量同步：

使用SQLite存储 last_processed_id

数据对比算法：

new_ids = set(current_tweets) - set(stored_tweets)
媒体处理：

选择视频的最高比特率版本：



def select_variant(variants):
    return max(
        [v for v in variants if v['content_type'] == 'video/mp4'],
        key=lambda x: x.get('bit_rate',0)
    )
	
4. 消息构造
格式规范：

复制
[媒体组（图片/视频）]

[作者昵称](profile_url)：
[推文正文]

🔗 [tweet_url](tweet_url)
发送规则：

单条推文最多4个媒体（使用media_group）

纯文本推文直接发送


5. 异常处理
错误分类：


graph TD
  A[错误类型] --> B[API限额耗尽]
  A --> C[认证失效]
  A --> D[网络异常]
  A --> E[数据解析失败]
恢复机制：

网络错误：3次指数退避重试

认证错误：发送重新认证指引

存储失败：启用本地缓存文件

非功能需求
1. 配置管理
使用.env模板：
{.env|TELEGRAM_TOKEN="Telegram Bot Token"
TWITTER_CLIENT_ID="Twitter Client ID"
TWITTER_CLIENT_SECRET="Twitter Client Secret"
TELEGRAM_CHANNEL_ID="频道ID"
TWITTER_UID="Twitter用户ID"
telegram_admin_USER_ID="382789063"}


2. 部署要求
支持多平台conda部署

依赖管理：依赖写进requirements里，一键安装
	pip install -r requirements.txt


bash
数据迁移：

直接使用git仓库同步，新仓库只需要手动配置.env

加密存储OAuth token

3. 监控机制
执行日志格式：


状态上报：

报错直接私聊发送给开发者


最小持久化数据集：

CREATE TABLE sync_state (
  id INTEGER PRIMARY KEY,
  last_tweet_id TEXT,
  updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

}

